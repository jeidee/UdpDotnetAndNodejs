{"filter":false,"title":"chat.router.js","tooltip":"/nodejsUdp/chat.router.js","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":247,"column":0}},"nl":"\n","lines":["var dgram=require('dgram');","var server=dgram.createSocket('udp4');","var moment = require('moment');","","var entity = require('./entity.js');","var stub = require('./c2s.stub.js');","var proxy = require('./s2c.proxy.js');","","var user_list = new entity.UserList();","var p2pgroup_list = new entity.P2PGroupList();","var stub = new stub.stub();","var proxy = new proxy.proxy();","","//socket ����, udp4 �� UDP over IPv4, udp6�� UDP over IPv6�� �ǹ�","server.on('message',function(msg, ep){","  stub.process(msg, ep);","//        console.log('server got message:'+message);","//        console.log('server got from:'+rinfo.address+' port:'+rinfo.port);","//        var send_message = new Buffer(JSON.stringify(rinfo));","//        server.send(send_message,0,send_message.length,rinfo.port,rinfo.address);","//������ �̿��ؼ� Ư�� �ּ�, ��Ʈ�� �޽��� ����","//client.send(message,0,message.length,port,client,function(){//message buffer ��Ȱ�� ����}","});","//���ο� �޽����� �����ϸ� message �޽����� �߻���Ŵ","//rinfo�� ������ Ŭ���̾�Ʈ ����","var port = 11515;","server.on('listening',function(){","        var address=server.address();","        console.log('server listening on ' + address.address+':'+address.port);","});     ","","server.bind(port);","","stub.OnHeartbeat = function(msg, ep) {","\tvar user = user_list.get(msg.uid);","\tif(user == undefined) return;","","\tif(!user) {","\t\tconsole.log(msg.uid + ' is not logined');","\t\treturn;","\t}","","\tuser.heartbeat_time = moment();","};","","stub.OnReqLogin = function(msg, ep) {","\tconsole.log('Request login from : ' + msg.uid + ', end point : ' + ep);","","\tif(user_list.exists(msg.uid)) {","\t\tvar euser = user_list.get(msg.uid);","\t\tvar error_msg = msg.uid + ' is already logined from ' + euser.public_ip + ' at ' + euser.format();","\t\tconsole.log(error_msg);","","\t\tproxy.ResLogin(ep.address, ep.port, server, msg.uid, false, error_msg, euser.public_ip, euser.public_port);","\t\treturn;","\t}","","\tvar user = new entity.User();","\tuser.uid = msg.uid;","\tuser.public_ip = ep.address;","\tuser.public_port = ep.port;","","\tuser_list.put(user.uid, user);","\t","\tproxy.ResLogin(ep.address, ep.port, server, msg.uid, true, \"\", user.public_ip, user.public_port);","};","","stub.OnReqLogout = function(msg, ep) {","\tconsole.log('Request logout from : ' + msg.uid + ', end point : ' + ep);","","\tif(msg.uid == null || msg.uid == \"\") {","\t\tconsole.log(msg.uid + ' is invalid.');","\t\treturn;","\t}","","\tvar user = user_list.get(msg.uid);","\tif(!user) {","\t\tconsole.log(msg.uid + ' is not logined.');","\t\treturn;","\t}","\tuser_list.remove(msg.uid);","","\t// remove from group and notify to users in group","\tvar group = p2pgroup_list.get(user.group);","\tif(group) {","\t\tif(group.user_list.exists(msg.uid)) {","\t\t\tgroup.user_list.remove(msg.uid);","","\t\t\tfor(var key in group.user_list.list) {","\t\t\t\tvar to_user = group.user_list.get(key);","\t\t\t\tproxy.NotifyLeave(to_user.public_ip, to_user.public_port, server, msg.uid, group.name); ","\t\t\t}","\t\t}","\t}","","\tproxy.ResLogout(ep.address, ep.port, server, msg.uid, true, \"\", ep.address, ep.port);","};","","stub.OnReqJoin = function(msg, ep) {","\tconsole.log('Request join from : ' + msg.uid + ', end point : ' + ep);","","\tvar user = user_list.get(msg.uid);","\tif(!user) {","\t\tvar error_msg = msg.uid + ' is not logined';","\t\tconsole.log(error_msg);","","\t\tproxy.ResJoin(ep.address, ep.port, server, msg.uid, false, error_msg);","\t\treturn;","\t}","","\tif(user.group != \"\") {","\t\tvar error_msg = msgObject.uid + ' is already joined in ' + user.group;","\t\tconsole.log(error_msg);","","\t\tproxy.ResJoin(ep.address, ep.port, server, msg.uid, false, error_msg);","\t\treturn;","\t}      ","","\tvar group = p2pgroup_list.get(msg.group);","\tif(!group) {","\t\tgroup = new entity.P2PGroup();","\t\tgroup.name = msg.group;","","\t\tp2pgroup_list.put(msg.group, group);","\t\tconsole.log(msg.group + ' is created');","\t}      ","","\t// notify to users in group","\tfor(var key in group.user_list.list) {","\t\tif(key == null || key == undefined) break;","","\t\ttry {","\t\t\tvar to_user = group.user_list.get(key);","\t\t\tconsole.log('debug...noti to ' + to_user.uid);","\t\t\tproxy.NotifyJoin(to_user.public_ip, to_user.public_port, server, msg.uid, group.name, ep.address, ep.port);","\t\t} catch(e) {","\t\t\tconsole.log(key + ' is deleted.');","\t\t\tdelete group.user_list.get(key);","\t\t}","\t}","","\tgroup.user_list.put(user.uid, user);","\tuser.group = group.name;","","\tproxy.ResJoin(ep.address, ep.port, server, msg.uid, true, \"\");","};","","stub.OnReqLeave = function(msg, ep) {","\tconsole.log('Leave : ' + msg.uid + ' ep : ' + ep);","","\tvar user = user_list.get(msg.uid);","\tif(!user) {","\t\tvar error_msg = msg.uid + ' is not logined';","\t\tconsole.log(error_msg);","","\t\tproxy.ResLeave(ep.address, ep.port, server, msg.uid, false, error_msg);","\t\treturn;","\t}","","\tconsole.log(user.uid + ' will be removed in ' + msg.group);","\tvar group = p2pgroup_list.get(msg.group);","\tif(!group) {","\t\tvar error_msg = msg.group + ' is not created.';","\t\tconsole.log(error_msg);","","\t\tproxy.ResLeave(ep.address, ep.port, server, msg.uid, false, error_msg);","\t\treturn;","\t}      ","","\tdelete group.user_list.remove(msg.uid);","\tuser.group = \"\";","","\t// notify to users in group","\tfor(var key in group.user_list.list) {","\t\tif(key == null || key == undefined) break;","\t\tvar to_user = group.user_list.get(key);","","\t\tproxy.NotifyLeave(to_user.public_ip, to_user.public_port, server, msg.uid, to_user.group);","\t}","","\tproxy.ResLeave(ep.address, ep.port, server, msg.uid, true, \"\");","};","","stub.OnReqUserList = function(msg, ep) {","\tconsole.log('Request user list in group : ' + msg.uid + ' ep : ' + ep);","\t","\tvar user = user_list.get(msg.uid);","\tif(!user) {","\t\tvar error_msg = msg.uid + ' is not logined';","\t\tconsole.log(error_msg);","\t\tproxy.ResUserList(ep.address, ep.port, server, msg.uid, null);","\t\treturn;","\t}","","\tvar group = p2pgroup_list.get(msg.group);","\tif(!group) {","\t\tvar error_msg = msg.group + ' is not created.';","\t\tconsole.log(error_msg);","\t\tproxy.ResUserList(ep.address, ep.port, server, msg.uid, null);","\t\treturn;","\t}","","\tif(!group.user_list.exists(user.uid)) {","\t\tvar error_msg = user.uid + ' is not a member of ' + group.name;","\t\tconsole.log(error_msg);","\t\tproxy.ResUserList(ep.address, ep.port, server, msg.uid, null);","\t\treturn;","\t}","","\tproxy.ResUserList(ep.address, ep.port, server, msg.uid, group.user_list.list);","};","","setInterval(function() {","    if(user_list.count() != 0) {","      for(var uid in user_list.list) {","        var user = user_list.get(uid);","        var now = moment();","        var diff_sec = now.seconds() - user.heartbeat_time.seconds();","        //console.log('diff_sec is ' + diff_sec);","        if(diff_sec >= 10) {","          console.log(user.uid + ' will be removed from user_list as timeout.');","          ","          // �׷쿡�� ����","          var group = p2pgroup_list.get(user.group);","          if(group != null && group != undefined) {","            group.user_list.remove(uid);","          }","          ","          console.log(user.uid + ' is removed from user_list as timeout.');","          user_list.remove(uid);","        }","      }","    }","    ","    if(p2pgroup_list.count() != 0) {","      for(var groupname in p2pgroup_list.list) {","        var group = p2pgroup_list.get(groupname);","        //console.log('group[' + groupname + '] has user ' + group.user_list.count());","        ","        if(group.user_list.count() == 0) {","          console.log(groupname + ' is removed because group is empty.');","          p2pgroup_list.remove(groupname);","        }","      }","    }","   ","}, 1000);"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":31}},"text":"var moment = require('moment');"},{"action":"insertText","range":{"start":{"row":0,"column":31},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":261,"column":0}},"lines":["var Map = require('./odin.map.js').OdinMap;","","var Entity = require('./chat.Entity.js');","var Stub = require('./c2s.stub.js').stub;","var Proxy = require('./s2c.proxy.js').proxy;","","var stub = new Stub();","var proxy = new Proxy();","var userList = new Entity.UserList();","var p2pGroupList = new Entity.P2PGroupList();","","var Router = function(protocol) {","  proxy.protocol = protocol;","};","","Router.prototype = {","  process : function(message, socket, sessions) {","    stub.process(message, socket, sessions);","  },","};","","stub.OnHeartbeat = function(message, socket, sessions) {","  var user = userList.get(message.uid);","  if(user == undefined) return;","","  if(!user) {","    console.log(message.uid + ' is not logined');","    return;","  }","","  user.heartbeatTime = moment();","};","","stub.OnReqLogin = function(message, socket, sessions) {","  console.log('Request login from : ' + message.uid);","","  if(userList.exists(message.uid)) {","    var euser = userList.get(message.uid);","    var errorMsg = message.uid + ' is already logined from ' + euser.publicIp + ' at ' + euser.format();","    console.log(errorMsg);","","    proxy.ResLogin(socket, message.uid, false, errorMsg, euser.publicIp, euser.publicPort, message.dummy);","    return;","  }","","  var user = new Entity.User();","  user.socket = socket;","  user.uid = message.uid;","  user.publicIp = socket.remoteAddress;","  user.publicPort = socket.remotePort;","","  userList.put(user.uid, user);","","  proxy.ResLogin(socket, message.uid, true, \"\", user.publicIp, user.publicPort, message.dummy);","};","","stub.OnReqLogout = function(message, socket, sessions) {","  console.log('Request logout from : ' + message.uid );","","  if(message.uid == null || message.uid == \"\") {","    console.log(message.uid + ' is invalid.');","    return;","  }","","  var user = userList.get(message.uid);","  if(!user) {","    console.log(message.uid + ' is not logined.');","    return;","  }","  userList.remove(message.uid);","","  // remove from group and notify to users in group","  var group = p2pGroupList.get(user.group);","  if(group) {","    if(group.userList.exists(message.uid)) {","      group.userList.remove(message.uid);","","      for(var key in group.userList.list) {","        var toUser = group.userList.get(key);","        proxy.NotifyLeave(socket, message.uid, group.name);","      }","    }","  }","","  proxy.ResLogout(socket, message.uid, true, \"\", socket.remoteAddress, socket.remotePort);","};","","stub.OnReqJoin = function(message, socket, sessions) {","  console.log('Request join from : ' + message.uid);","","  var user = userList.get(message.uid);","  if(!user) {","    var errorMsg = message.uid + ' is not logined';","    console.log(errorMsg);","","    proxy.ResJoin(socket, message.uid, false, errorMsg);","    return;","  }","","  if(user.group != \"\") {","    var errorMsg = msgObject.uid + ' is already joined in ' + user.group;","    console.log(errorMsg);","","    proxy.ResJoin(socket, message.uid, false, errorMsg);","    return;","  }","","  var group = p2pGroupList.get(message.group);","  if(!group) {","    group = new Entity.P2PGroup();","    group.name = message.group;","","    p2pGroupList.put(message.group, group);","    console.log(message.group + ' is created');","  }","","  // notify to users in group","  for(var key in group.userList.list) {","    if(key == null || key == undefined) break;","","    try {","      var toUser = group.userList.get(key);","      console.log('debug...noti to ' + toUser.uid);","      proxy.NotifyJoin(socket, message.uid, group.name, socket.remoteAddress, socket.remotePort);","    } catch(e) {","      console.log(key + ' is deleted.');","      delete group.userList.get(key);","    }","  }","","  group.userList.put(user.uid, user);","  user.group = group.name;","","  proxy.ResJoin(socket, message.uid, true, \"\");","};","","stub.OnReqLeave = function(message, socket, sessions) {","  console.log('Leave : ' + message.uid);","","  var user = userList.get(message.uid);","  if(!user) {","    var errorMsg = message.uid + ' is not logined';","    console.log(errorMsg);","","    proxy.ResLeave(socket, message.uid, false, errorMsg);","    return;","  }","","  console.log(user.uid + ' will be removed in ' + message.group);","  var group = p2pGroupList.get(message.group);","  if(!group) {","    var errorMsg = message.group + ' is not created.';","    console.log(errorMsg);","","    proxy.ResLeave(socket, message.uid, false, errorMsg);","    return;","  }","","  delete group.userList.remove(message.uid);","  user.group = \"\";","","  // notify to users in group","  for(var key in group.userList.list) {","    if(key == null || key == undefined) break;","    var toUser = group.userList.get(key);","","    proxy.NotifyLeave(socket, message.uid, toUser.group);","  }","","  proxy.ResLeave(socket, message.uid, true, \"\");","};","","stub.OnReqUserList = function(message, socket, sessions) {","  console.log('Request user list in group : ' + message.uid);","","  var user = userList.get(message.uid);","  if(!user) {","    var errorMsg = message.uid + ' is not logined';","    console.log(errorMsg);","    proxy.ResUserList(socket, message.uid, null);","    return;","  }","","  var group = p2pGroupList.get(message.group);","  if(!group) {","    var errorMsg = message.group + ' is not created.';","    console.log(errorMsg);","    proxy.ResUserList(socket, message.uid, null);","    return;","  }","","  if(!group.userList.exists(user.uid)) {","    var errorMsg = user.uid + ' is not a member of ' + group.name;","    console.log(errorMsg);","    proxy.ResUserList(socket, message.uid, null);","    return;","  }","","  proxy.ResUserList(socket, message.uid, group.userList.list);","};","","stub.OnReqChat = function(message, socket, sessions) {","  console.log('Request chat : ', message);","","  var user = userList.get(message.uid);","  if(!user) {","    var errorMsg = message.uid + ' is not logined';","    console.log(errorMsg);","    proxy.ResChat(socket, message.uid, false, errorMsg);","    return;","  }","","  // notify to users in group","  for(var key in sessions.list) {","    if(key == null || key == undefined) break;","    var toSocket = sessions.get(key);","","    proxy.NotifyChat(toSocket, message.uid, message.chat);","  }","","};","","setInterval(function() {","    if(userList.count() != 0) {","      for(var uid in userList.list) {","        var user = userList.get(uid);","        var now = moment();","        var diffSec = now.seconds() - user.heartbeatTime.seconds();","        //console.log('diffSec is ' + diffSec);","        if(diffSec >= 10) {","          console.log(user.uid + ' will be removed from userList as timeout.');","","          var group = p2pGroupList.get(user.group);","          if(group != null && group != undefined) {","            group.userList.remove(uid);","          }","","          user.socket.destroy();","          console.log(user.uid + ' is removed from userList as timeout.');","          userList.remove(uid);","        }","      }","    }","","    if(p2pGroupList.count() != 0) {","      for(var groupname in p2pGroupList.list) {","        var group = p2pGroupList.get(groupname);","        //console.log('group[' + groupname + '] has user ' + group.userList.count());","","        if(group.userList.count() == 0) {","          console.log(groupname + ' is removed because group is empty.');","          p2pGroupList.remove(groupname);","        }","      }","    }","","}, 1000);","","","exports.Router = Router;"]}]}]]},"ace":{"folds":[],"scrolltop":3108,"scrollleft":0,"selection":{"start":{"row":261,"column":0},"end":{"row":261,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1411008847281,"hash":"f8272f597a9abcc600df2740103a61654ae5bd7f"}