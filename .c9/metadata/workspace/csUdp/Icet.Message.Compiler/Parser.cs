{"filter":false,"title":"Parser.cs","tooltip":"/csUdp/Icet.Message.Compiler/Parser.cs","undoManager":{"mark":2,"position":2,"stack":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"text":"﻿"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":91,"column":0}},"nl":"\n","lines":["using System;","using System.Collections.Generic;","using System.Linq;","using System.Text;","using System.Xml;","","namespace Icet.Message.Compiler","{","    class Parser","    {","        public Protocol Parse(string packet_file)","        {","            XmlDocument doc = new XmlDocument();","            doc.Load(packet_file);","","            Protocol protocol = new Protocol();","            XmlNode protocol_node = doc.SelectSingleNode(\"/Protocol\");","            protocol.name = protocol_node.Attributes[\"name\"].InnerText;","            protocol.number = int.Parse(protocol_node.Attributes[\"number\"].InnerText);","            protocol.version = int.Parse(protocol_node.Attributes[\"version\"].InnerText);","","","            /// Using","            XmlNodeList using_list = protocol_node.SelectNodes(\"Import\");","            foreach (XmlNode node in using_list)","            {","                Import import = new Import();","                import.name = node.Attributes[\"name\"].InnerText;","                import.lang = node.Attributes[\"lang\"].InnerText;","","                protocol.import_list.Add(import);","            }","","","            /// FLAG","            XmlNodeList flag_list = protocol_node.SelectNodes(\"Flag\");","            foreach (XmlNode node in flag_list)","            {","                Flag flag = new Flag();","                flag.name = node.Attributes[\"name\"].InnerText;","                flag.value = int.Parse(node.Attributes[\"value\"].InnerText);","                if (node.Attributes[\"desc\"] != null)","                    flag.desc = node.Attributes[\"desc\"].InnerText;","                else","                    flag.desc = \"\";","","                protocol.flag_list.Add(flag);","            }","","            /// Message","            XmlNodeList message_list = protocol_node.SelectNodes(\"Message\");","            UInt32 last_id = 0;","            foreach (XmlNode node in message_list)","            {","                Message message = new Message();","                message.name = node.Attributes[\"name\"].InnerText;","                if (node.Attributes[\"id\"] == null)","                {","                    message.id = ++last_id;","                }","                else","                {","                    message.id = UInt32.Parse(node.Attributes[\"id\"].InnerText);","                    last_id = message.id;","                }","","                XmlNodeList data_list = node.SelectNodes(\"Data\");","                foreach (XmlNode data_node in data_list)","                {","                    Data data = new Data();","                    data.type = data_node.Attributes[\"type\"].InnerText;","                    data.name = data_node.Attributes[\"name\"].InnerText;","                    if (data_node.Attributes[\"generic\"] != null)","                        data.generic = data_node.Attributes[\"generic\"].InnerText;","                    else","                        data.generic = \"\";","                    if (data_node.Attributes[\"desc\"] != null)","                        data.desc = data_node.Attributes[\"desc\"].InnerText;","                    else","                        data.desc = \"\";","","                    message.data_list.Add(data);","                }","","                protocol.message_list.Add(message);","            }","","            return protocol;","        }","    }","}"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":14}},"text":"﻿using System;"},{"action":"insertText","range":{"start":{"row":0,"column":14},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":91,"column":0}},"lines":["using System.Collections.Generic;","using System.Linq;","using System.Text;","using System.Xml;","","namespace Icet.Message.Compiler","{","    class Parser","    {","        public Protocol Parse(string packetFile)","        {","            XmlDocument doc = new XmlDocument();","            doc.Load(packetFile);","","            Protocol protocol = new Protocol();","            XmlNode protocolNode = doc.SelectSingleNode(\"/Protocol\");","            protocol.name = protocolNode.Attributes[\"name\"].InnerText;","            protocol.number = int.Parse(protocolNode.Attributes[\"number\"].InnerText);","            protocol.version = int.Parse(protocolNode.Attributes[\"version\"].InnerText);","","","            /// Using","            XmlNodeList usingList = protocolNode.SelectNodes(\"Import\");","            foreach (XmlNode node in usingList)","            {","                Import import = new Import();","                import.name = node.Attributes[\"name\"].InnerText;","                import.lang = node.Attributes[\"lang\"].InnerText;","","                protocol.importList.Add(import);","            }","","","            /// FLAG","            XmlNodeList flagList = protocolNode.SelectNodes(\"Flag\");","            foreach (XmlNode node in flagList)","            {","                Flag flag = new Flag();","                flag.name = node.Attributes[\"name\"].InnerText;","                flag.value = int.Parse(node.Attributes[\"value\"].InnerText);","                if (node.Attributes[\"desc\"] != null)","                    flag.desc = node.Attributes[\"desc\"].InnerText;","                else","                    flag.desc = \"\";","","                protocol.flagList.Add(flag);","            }","","            /// Message","            XmlNodeList messageList = protocolNode.SelectNodes(\"Message\");","            UInt32 lastId = 0;","            foreach (XmlNode node in messageList)","            {","                Message message = new Message();","                message.name = node.Attributes[\"name\"].InnerText;","                if (node.Attributes[\"id\"] == null)","                {","                    message.id = ++lastId;","                }","                else","                {","                    message.id = UInt32.Parse(node.Attributes[\"id\"].InnerText);","                    lastId = message.id;","                }","","                XmlNodeList dataList = node.SelectNodes(\"Data\");","                foreach (XmlNode dataNode in dataList)","                {","                    Data data = new Data();","                    data.type = dataNode.Attributes[\"type\"].InnerText;","                    data.name = dataNode.Attributes[\"name\"].InnerText;","                    if (dataNode.Attributes[\"generic\"] != null)","                        data.generic = dataNode.Attributes[\"generic\"].InnerText;","                    else","                        data.generic = \"\";","                    if (dataNode.Attributes[\"desc\"] != null)","                        data.desc = dataNode.Attributes[\"desc\"].InnerText;","                    else","                        data.desc = \"\";","","                    message.dataList.Add(data);","                }","","                protocol.messageList.Add(message);","            }","","            return protocol;","        }","    }","}"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"text":"﻿"}]}]]},"ace":{"folds":[],"scrolltop":900,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1411015573402,"hash":"07f0373344127704c4a2c2ea4790f15a341e1e78"}