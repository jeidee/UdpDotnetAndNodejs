{"filter":false,"title":"MessageClient.cs","tooltip":"/csUdp/Icet.Message/MessageClient.cs","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":132,"column":0}},"nl":"\n","lines":["﻿using System;","using System.Collections.Generic;","using System.Linq;","using System.Text;","using System.Net.Sockets;","using System.Net;","using Newtonsoft.Json;","","namespace Icet.Message","{","    public class MessageClient","    {","        class MessageHeader","        {","            public string id;","        }","","        UdpClient net_client;","        public UdpClient connection","        {","            get { return net_client; }","        }","        bool is_running = false;","        Dictionary<string, RpcStubInfo> stub_handlers = new Dictionary<string, RpcStubInfo>();","        List<MessageStub> stub_list = new List<MessageStub>();","        List<MessageProxy> proxy_list = new List<MessageProxy>();","","        public MessageClient()","        {","        }","","","        public bool AttachStub(MessageStub stub)","        {","            if (stub.AttachRpcStub(stub_handlers))","            {","                stub_list.Add(stub);","                return true;","            }","","            return false;","        }","","","        public bool AttachProxy(MessageProxy proxy)","        {","            if (proxy_list.Find(e => e == proxy) == null)","            {","                proxy_list.Add(proxy);","                return true;","            }","","            return false;","        }","","","        public void Init(bool use_multi_thread)","        {","            net_client = new UdpClient();","        }","","","        public void Connect(string host, int port)","        {","            Console.WriteLine(\"Client start...\");","","            IPEndPoint remote_ep = new IPEndPoint(Dns.GetHostAddresses(host)[0], port);","            net_client.Connect(remote_ep);","","            is_running = true;","            AsyncCallback rcv_callback = null;","            rcv_callback = new AsyncCallback((ar) =>","            {","                if (!is_running) return;","","                string message = \"\";","","                try","                {","                    byte[] receive_data = net_client.EndReceive(ar, ref remote_ep);","                    message = UTF8Encoding.UTF8.GetString(receive_data, 0, receive_data.Length);","                }","                catch (SocketException se)","                {","                    //session.Clear();","                    if (se.SocketErrorCode == SocketError.ConnectionReset)","                    {","                        Console.WriteLine(\"Disconnected from server.\");","                    }","                    else","                    {","                        Console.WriteLine(se.Message);","                    }","                }","                catch (Exception ex)","                {","                    //session.Clear();","                    Console.WriteLine(ex.Message);","                    return;","                }","","                MessageHeader msgobj = JsonConvert.DeserializeObject<MessageHeader>(message);","                if (msgobj == null)","                {","                    Console.WriteLine(\"Invalid message. {0}\", message);","                }","                else","                {","                    if (!stub_handlers.ContainsKey(msgobj.id))","                    {","                        Console.WriteLine(\"[CLIENT]Unknown message id {0}\", msgobj.id);","                        return;","                    }","","                    stub_handlers[msgobj.id].Call(message);","                }","","                Console.WriteLine(\"Received message is '{0}'.\", message);","                net_client.BeginReceive(rcv_callback, ar);","            });","","            net_client.BeginReceive(rcv_callback, null);","","        }","","","        public void Stop()","        {","            is_running = false;","        }","    }","}"]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":14}},"text":"﻿using System;"},{"action":"insertText","range":{"start":{"row":0,"column":14},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":163,"column":0}},"lines":["using System.Collections.Generic;","using System.Linq;","using System.Text;","using System.Net.Sockets;","using System.Net;","using Newtonsoft.Json;","","namespace Icet.Message","{","    public class MessageClient","    {","        const int PACKET_HEADER_SIZE = 4;","","        class MessageHeader","        {","            public string id;","        }","","        List<byte> receiveBuffer = new List<byte>();","        int packetSize = -1;","","        Socket netClient;","        public Socket connection","        {","            get { return netClient; }","        }","        bool isRunning = false;","        public bool IsRunning","        {","            get { return isRunning;  }","        }","        Dictionary<string, RpcStubInfo> stubHandlers = new Dictionary<string, RpcStubInfo>();","        List<MessageStub> stubList = new List<MessageStub>();","        List<MessageProxy> proxyList = new List<MessageProxy>();","","        public MessageClient()","        {","        }","","","        public bool AttachStub(MessageStub stub)","        {","            if (stub.AttachRpcStub(stubHandlers))","            {","                stubList.Add(stub);","                return true;","            }","","            return false;","        }","","","        public bool AttachProxy(MessageProxy proxy)","        {","            if (proxyList.Find(e => e == proxy) == null)","            {","                proxyList.Add(proxy);","                return true;","            }","","            return false;","        }","","","        public void Init(bool useMultiThread)","        {","            netClient = new Socket(AddressFamily.InterNetwork,","                SocketType.Stream,","                ProtocolType.Tcp);","","            netClient.SendBufferSize = 10;","        }","","","        public void Connect(string host, int port)","        {","            Console.WriteLine(\"Client start...\");","","            var ar = new SocketAsyncEventArgs();","            IPEndPoint remoteEp = new IPEndPoint(Dns.GetHostAddresses(host)[0], port);","            ar.RemoteEndPoint = remoteEp;","            ar.Completed += OnConnectCompleted;","","            netClient.ConnectAsync(ar);","        }","","        void OnConnectCompleted(object sender, SocketAsyncEventArgs e)","        {","            isRunning = true;","","            var ar = new SocketAsyncEventArgs();","            ar.SetBuffer(new byte[1024], 0, 1024);","            ar.UserToken = netClient;","            ar.Completed += OnReceiveCompleted;","            netClient.ReceiveAsync(ar);","        }","","        void OnReceiveCompleted(object sender, SocketAsyncEventArgs e)","        {","            var clientSocket = (Socket)sender;","            if (clientSocket.Connected && e.BytesTransferred > 0)","            {","                if (!isRunning) return;","","                receiveBuffer.AddRange(e.Buffer);","                receiveBuffer.RemoveRange(e.BytesTransferred, e.Buffer.Length - e.BytesTransferred);","","                if (receiveBuffer.Count > PACKET_HEADER_SIZE &&","                    packetSize == -1)","                {","                    packetSize = BitConverter.ToInt32(receiveBuffer.ToArray(), 0) - PACKET_HEADER_SIZE;","                    receiveBuffer.RemoveRange(0, PACKET_HEADER_SIZE);","                }","","                if (receiveBuffer.Count >= packetSize)","                {","                    byte[] buffer = new byte[packetSize];","                    receiveBuffer.CopyTo(0, buffer, 0, packetSize);","                    receiveBuffer.RemoveRange(0, packetSize);","                    packetSize = -1;","","                    string message = UTF8Encoding.UTF8.GetString(buffer);","","                    MessageHeader msgobj = JsonConvert.DeserializeObject<MessageHeader>(message);","                    if (msgobj == null)","                    {","                        Console.WriteLine(\"Invalid message. {0}\", message);","                    }","                    else","                    {","                        if (!stubHandlers.ContainsKey(msgobj.id))","                        {","                            Console.WriteLine(\"[CLIENT]Unknown message id {0}\", msgobj.id);","                            return;","                        }","","                        stubHandlers[msgobj.id].Call(message);","                    }","","                    Console.WriteLine(\"Received message is '{0}'.\", message);","                }","","                var ar = new SocketAsyncEventArgs();","                ar.SetBuffer(new byte[1024], 0, 1024);","                ar.UserToken = netClient;","                ar.Completed += OnReceiveCompleted;","                netClient.ReceiveAsync(ar);","            }","        }","","","        public void Stop()","        {","            isRunning = false;","        }","","        public void Close(int timeoutSec)","        {","            netClient.Close(timeoutSec);","        }","    }","}"]}]}]]},"ace":{"folds":[],"scrolltop":1736,"scrollleft":0,"selection":{"start":{"row":163,"column":0},"end":{"row":163,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":34,"state":"start","mode":"ace/mode/csharp"}},"timestamp":1411014239825,"hash":"4987eb4142fb1c9bae3910612b95743d3c2a825a"}